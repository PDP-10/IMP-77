!FTP0.IMP
!   COPYRIGHT K.FARVIS ERCC.
!THIS FILE CONTAINS THE ROUTINES WHICH WILL READ AND WRITE RECORDS AT
!LEVEL ONE OF THE FTP PROTOCOL.
!THEY USE THE BUFFERS 'SCOM' AND 'RCOM' AND REQUIRE THE ROUTINES
!'GET' 'PUT' AND 'PUT OUT' WHICH WORK WITH THE TRANSPORT MECHANISM
!DIRECTLY
!THE CURRENT INPUT AND OUTPUT STEAMS ARE PRESERVED ACROSS ROUTINE CALLS


%EXTERNALINTEGERSPEC XOTHER NODE
%EXTERNALINTEGERSPEC MAX SUB RECORD;  !FOR OUTPUTTING - SPECIAL FOR UMIST
%EXTERNALINTEGERSPEC LOGLEVEL
%EXTERNALSTRING(255)%SPEC ERRMSG
%EXTERNALINTEGERSPEC SENT,SENT ARG

%CONSTINTEGER TRUE=-1, FALSE=0
%CONSTINTEGER TTY=1, LOG=3, FTP=5

%EXTERNALSTRING(8)%FNSPEC TIME
%EXTERNALROUTINESPEC WRITEHEX(%INTEGER N,M)

%EXTERNALROUTINESPEC GOT
%EXTERNALROUTINESPEC GET(%INTEGERNAME N)
%EXTERNALROUTINESPEC PUT(%INTEGER N)
%EXTERNALROUTINESPEC PUT OUT
%OWNINTEGER GET0LEN;   !POINTER TO CURRENT BYTE IN RCOM USED BY GET0 ROUTINE
%OWNINTEGER FIRST IN SUB RECORD;   !FLAG WORD FOR FIRST SUB RECORD BEING INPUT
%OWNINTEGER FIRST OUT SUB RECORD;   !FLAG WORD FOR FIRST SUB RECORD BEING OUTPUT
%OWNINTEGER READ EOR;    !FLAG FOR LAST SUB-RECORD HAVING BEEN READ
%OWNINTEGER SEND EOR;    !FLAG TO SEND LAST SUB-RECORD

!THE COMMAND BUFFERS
%OWNINTEGERARRAY RCOM(0:63);  !INPUT COMMAND BUFFER
%OWNINTEGERARRAY SCOM(0:63);  !OUTPUT COMMAND BUFFER

!LEVEL 0 COMMANDS
%CONSTINTEGER STOP=0, GO=1, RPOS=2, RNEG=3, SFT=4, STOPACK=5
%CONSTSTRING(7)%ARRAY COMMANDS0(0:5)="STOP", "GO", "RPOS", "RNEG", "SFT", "STOPACK"
!HEADER BIT DEFNITIONS
%CONSTINTEGER EOR BIT=16_80, COMPRESSION BIT=16_40, BYTE COUNT=16_3F

%ROUTINE NEWLINE
!===============
   PRINTSYMBOL(NL)
%END


%EXTERNALROUTINE INIT0
!======================
!initialise the variables for this level
   FIRST IN SUB RECORD=TRUE
   FIRST OUT SUB RECORD=TRUE
   RCOM(0)=0
   SCOM(0)=0
%END



%ROUTINE R0
!==========
!called from the two subsequent routines to get a level 0 subrecord
!into the internal buffer RCOM()
   %INTEGER N,IN,OUT,HEADER
   IN=INSTREAM; SELECT INPUT(FTP)
   GET(HEADER)
   RCOM(0)=HEADER&BYTE COUNT
   %IF HEADER&EOR BIT#0 %THEN READ EOR=TRUE %ELSE READ EOR=FALSE
   %IF RCOM(0)>0 %START
      GET(RCOM(N)) %FOR N=1,1,RCOM(0)
   %FINISH
   GOT
   SELECT INPUT(IN)
   %IF LOGLEVEL>=10 %START
      OUT=OUTSTREAM; SELECT OUTPUT(LOG)
      PRINTSTRING(TIME); PRINTSTRING("  >>-0->>")
      %IF READ EOR %THEN PRINTSTRING(" EOR ") %ELSE SPACES(5)
      printstring("Count="); WRITE(RCOM(0),0); PRINTSYMBOL(TAB)
      %IF FIRST IN SUBRECORD %and RCOM(0)>0 %START;   !ONLY FOR FIRST PART OF RECORD
         PRINTSTRING("Command=")
         %IF RCOM(1)<=STOPACK %THEN PRINTSTRING(COMMANDS0(RCOM(1))) %ELSE WRITEHEX(RCOM(1),0)
         %IF RCOM(0)>1 %START;    !SOME PARAMETER ARG
            PRINTSYMBOL(TAB); PRINTSTRING("Parameters="); WRITE(RCOM(2),0)
         %FINISH
      %FINISH
      NEWLINE
      SELECT OUTPUT(OUT)
   %FINISH
   FIRST IN SUB RECORD=FALSE %UNLESS RCOM(0)=0
   GET0LEN=1; !RESET BUFFER POINTER
%END

%EXTERNALROUTINE READ0
!=====================
!ISSUED BY THE USER TO GET A NEW LEVEL 0 RECORD
   FIRST IN SUB RECORD=TRUE
   R0
%END

%EXTERNALROUTINE GET0(%INTEGERNAME N)
!====================================
!Issued after an initial READ0 in order to get the items from the level 0
!record and it also reads subsequent subrecords behind the scenes.
   %WHILE GET0LEN>RCOM(0) %CYCLE
      %IF READ EOR=TRUE %START
         ERRMSG="Trying to read beyond a Level 0 record boundary"
         %SIGNAL 14,1
      %FINISH
      R0; !READ NEXT SUB RECORD
   %REPEAT
   N=RCOM(GET0LEN)
   GET0LEN=GET0LEN+1
   R0 %WHILE GET0LEN>RCOM(0) %AND READ EOR=FALSE; !READ AHEAD IF NECESSARY
%END




%ROUTINE S0
!==========
!USED BY THE FOLLOWING TO ROUTINES TO SEND OUT THE DATA IN THE ARRAY 'SCOM'
   %INTEGER N,EOR,OUT
   OUT=OUTSTREAM; SELECT OUTPUT(FTP)
   %IF SEND EOR %THEN EOR=1 %ELSE EOR=0
   PUT(EOR<<7!SCOM(0));  !HEADER WORD
   %IF LOGLEVEL>=10 %START
      SELECT OUTPUT(LOG)
      NEWLINE %IF EOR=0
      PRINTSTRING(TIME); PRINTSTRING("  <<-0-<<")
      %IF EOR=1 %THEN PRINTSTRING(" EOR ") %ELSE SPACES(5)
      PRINTSTRING("Count="); WRITE(SCOM(0),0); SPACE
      %IF FIRST OUT SUB RECORD %START
         PRINTSTRING("  Command=")
         %IF SCOM(1)<=STOPACK %THEN PRINTSTRING(COMMANDS0(SCOM(1))) %ELSE WRITEHEX(SCOM(1),0)
         PRINTSYMBOL(TAB); PRINTSTRING("Parameters="); WRITE(SCOM(2),0)
      %FINISH
      NEWLINE
      SELECT OUTPUT(FTP)
   %FINISH
   %IF SCOM(0)>0 %START
      PUT(SCOM(N)) %FOR N=1,1,SCOM(0)
   %FINISH
   PUT OUT
   SELECT OUTPUT(OUT)
   FIRST OUT SUB RECORD=FALSE
   SCOM(0)=0;   !CLEAR ARRAY
%END

%EXTERNALROUTINE SEND0
!=====================
!ISSUED BY USER TO INIIATE OUTPUT OF A LEVEL 0 RECORD
   SEND EOR=TRUE;  !INDICATE LAST SUBRECORD IN SEQUENCE
   S0
   FIRST OUT SUB RECORD=TRUE;  !FOR NEXT TIME
%END


%EXTERNALROUTINE PUT0(%INTEGER N)
!===================================
!PUTS A BYTE INTO THE ZERO LEVEL BUFFER AND OUTPUTS A SUB-RECORD IF NECESSARY
   %IF SCOM(0)=MAX SUB RECORD %START;   !OUTPUT A SUB RECORD
      SEND EOR=FALSE; S0;   !SEND IT AS A SUB-RECORD
   %FINISH
   SCOM(0)=SCOM(0)+1
   SCOM(SCOM(0))=N
%END


%ENDOFFILE
