!READ.IMP   

%EXTERNALSTRING(255)%SPEC ERRMSG
%CONSTINTEGERARRAY NMAX(1:3) =3435973836, 13107, 25; !LARGEST INTEGERS//10
%CONSTBYTEINTEGERARRAY N1MAX(1:3) ='7', '1', '6';  !LARGEST INTEGERS LAST DIGIT
%CONSTLONGREAL PMAX=1@15
%CONSTLONGREAL DZ=0.0

%EXTERNALROUTINE READ(%NAME X)
!***********************************************************************
!*       THIS ROUTINE IS THE IMP IMPLICITLY SPECIFIED ROUTINE WITH A   *
!*       %NAME PARAMETER.                                              *
!***********************************************************************
   %INTEGERARRAY XFRIG(0:0);  !A FRIG SO THAT X=XFRIG(-1)
   %BYTEINTEGER TYPE,DIGIT,FLAG,CURSYM; ! FLAG= 0FOR'-',1 FOR '+'
   %INTEGER N
   %LONGREAL RWORK,SCALE
   %ROUTINE READ A SYMBOL
      SKIP SYMBOL; CURSYM=NEXT SYMBOL
   %END

   %PREDICATE SYMBOLOK
      SKIP SYMBOL; CURSYM=NEXT SYMBOL
      %TRUE %IF '0'<=CURSYM<='9'
      %FALSE
   %END

   TYPE=X FRIG(-1)>>23&8_17 ;!GET AT THE TYPE FEILD OF X
   %IF TYPE = 4 %THEN READSTRING(STRING(ADDR(X))) %AND %RETURN
   %IF TYPE=0 %OR TYPE=5 %OR TYPE>7 %START
     ERRMSG="Illegal %name type"; %SIGNAL 5,6,type
   %FINISH
!  OTHERWISE A NUMBER
   FLAG=1; DIGIT=0
   CURSYM=NEXT SYMBOL;          ! CARE NOT TO READ TERMINATOR
! NOW IGNORE LEADING SPACES
   READASYMBOL %WHILE CURSYM<=' '
   %IF CURSYM='-' %START
      FLAG=0; READASYMBOL
   %ELSEIF CURSYM='+' %THEN READASYMBOL
   %UNLESS TYPE=6 %START;  !AN INTEGER TYPE VARIABLE
      ->NNF %UNLESS '0'<=CURSYM<='9'
      N=CURSYM-'0'
      %WHILE SYMBOLOK %CYCLE
         %IF N>=NMAX(TYPE) %AND CURSYM>N1MAX(TYPE) %START
            %WHILE SYMBOLOK %CYCLE; %REPEAT;  !SKIP REST OF NUMBER
            ERRMSG="Integer too large"
            %SIGNAL 1,1,N
         %FINISH
         N=N*10+(CURSYM-'0')
      %REPEAT
      N=-N %IF FLAG=0
      INTEGER(ADDR(X))=N;   !RETURN RESULT
      %RETURN
   %FINISH
!A REAL NUMBER
   %IF '0'<=CURSYM<='9' %START
      RWORK=CURSYM-'0';          ! KEEP TOTAL IN RWORK
      DIGIT=1;                    ! VALID DIGIT
      %WHILE SYMBOLOK %CYCLE
         RWORK=10*RWORK+(CURSYM-'0')
      %REPEAT
   %FINISH %ELSE RWORK=0
   %IF CURSYM='.' %START
      SCALE=10
      %WHILE SYMBOLOK %CYCLE
         DIGIT=1
         RWORK=RWORK+(CURSYM-'0')/SCALE
         SCALE=10*SCALE
      %REPEAT
   %FINISH
!
! THE VALUE HAS NOW BEEN READ INTO RWORK. THERE MIGHT BE AN EXPONENT
! E.G. '1.7@ 10'  IS VALID DATA FOR READ
!
   %IF CURSYM='@'   %START
      SKIP SYMBOL;                ! MOVE PAST THE '@'
      READ(N);     ! RECURSIVE CALL TO FIND EXPONENT
      %IF N=-99 %THEN RWORK=0 %ELSE RWORK=RWORK*10\N
   %ELSE
      ->NNF %IF DIGIT=0
   %FINISH
   RWORK=-RWORK %IF FLAG=0
   REAL(ADDR(X))=RWORK
   %RETURN
NNF:
   ERRMSG="Number not found"
   %SIGNAL 3,1,CURSYM
   %END; !OF READ

%ENDOFFILE
