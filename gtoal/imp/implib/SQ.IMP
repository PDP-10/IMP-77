!+
! ^THIS IS THE LIBRARY OF DIRECT ACCESS AND SEQUENTIAL ACCESS FILES UTILITIES
!^IT USES A SIMILAR MECHANISM TO THE STREAMS, USING THE SAME STREAM CONTROL
!BLOCKS BUT UTILISING DUMP-MODE READING AND WRITING ROUTINES.
!-


%INCLUDE "IMP:IOLIB.INC"

%CONSTINTEGER LH=8_777777000000, RH=8_777777

%EXTERNALINTEGERSPEC FUNCTION
%EXTERNALRECORD(SCBNAME)%ARRAYSPEC DASQVEC(1:MAXCHANS)

%EXTERNALSTRING(255)%SPEC ERRMSG
%SYSTEMROUTINESPEC BLT(%NAME FROM,TO, %INTEGER LEN)
%SYSTEMROUTINESPEC RDDUMP(%RECORD(SCB)%NAME S, %INTEGER LEN,%NAME LOC)
%SYSTEMROUTINESPEC WTDUMP(%RECORD(SCB)%NAME S, %INTEGER LEN, %NAME LOC)
%EXTERNALRECORD(FILESPEC)%FNSPEC STRTOFS(%STRING(255) SPEC)


%SYSTEMROUTINESPEC OPNDASQ(%INTEGER N,%RECORD(FILESPEC)%NAME FS,%INTEGER DAORSQ)
%SYSTEMROUTINESPEC DASQ CHANNEL CHECK(%INTEGER N, DAORSQ FILE)
%SYSTEMINTEGERFNSPEC DASQ LENGTH(%INTEGER CHAN, %NAME BEGIN,END)
%SYSTEMROUTINESPEC CLDASQ(%INTEGER N,TYPE)



%EXTERNALROUTINE XOPENSQ(%INTEGER N,%RECORD(FILESPEC)%NAME FS)
   %RECORD(RINGHEADER)%NAME R
   OPNDASQ(N,FS,SQFILE)
! NOW INITIALISE BUFFER POINTERS
   R==DASQVEC(N)_NAME_RINGHEAD
   R_BYTPTR=RH&R_BUFADR+2
   R_BYTCNT=0
%END

%EXTERNALROUTINE OPENSQ(%INTEGER M,%STRING(255) SPEC)
   %RECORD(FILESPEC) FS
   FS=STRTOFS(SPEC)
   XOPENSQ(M,FS)
%END


%EXTERNALROUTINE READSQ(%INTEGER M, %NAME BEGIN,END)
   %RECORD(SCB)%NAME DASQSCB;   !CONTAINS THE CURRENT DASQ RECORD
   %RECORD(RINGHEADER)%NAME R
   %INTEGER LENGTH,N,REMAINDER,BEG
   DASQ CHANNEL CHECK(M,SQFILE)
   DASQSCB==DASQVEC(M)_NAME
   R==DASQSCB_RINGHEAD
   %IF DASQSCB_IBUFOP=0 %START
      ERRMSG="Inputting from an SQ channel set for output"
      %SIGNAL 10,27,M
   %FINISH
!SET FOR INPUT ONLY
   %IF DASQSCB_OBUFOP # 0 %THEN DASQSCB_OBUFOP=0 %AND DASQSCB_USETO=0
   LENGTH=DASQ LENGTH(M,BEGIN,END)
   BEG=ADDR(BEGIN)&RH
   %IF LENGTH > R_BYTCNT %START
      %IF R_BYTCNT # 0 %START
         BLT(INTEGER(R_BYTPTR),INTEGER(BEG),R_BYTCNT)
         BEG=BEG+R_BYTCNT
         LENGTH=LENGTH-R_BYTCNT
         R_BYTPTR=RH&R_BUFADR+2
         R_BYTCNT=0
      %FINISH
   !HERE WHEN BYTE COUNT =0
      REMAINDER=REM(LENGTH,DASQSCB_BLOCKSIZE)
      %IF REMAINDER = 0 %START
         RDDUMP(DASQSCB,LENGTH,INTEGER(BEG))
         %RETURN
      %FINISH
      !ELSE READ N BLOCKS AND THEN REMAINDER INTO BUFFER
      N=LENGTH//DASQSCB_BLOCKSIZE
      %IF N # 0 %START
         RDDUMP(DASQSCB,N*DASQSCB_BLOCKSIZE,INTEGER(BEG))
         BEG=BEG+N*DASQSCB_BLOCKSIZE
      %FINISH
      R_BYTPTR=RH&R_BUFADR+2
      RDDUMP(DASQSCB,DASQSCB_BLOCKSIZE,INTEGER(R_BYTPTR))
      R_BYTCNT=DASQSCB_BLOCKSIZE
      LENGTH=REMAINDER
   %FINISH
!HERE WHEN LENGTH <= BYTE COUNT
   BLT(INTEGER(R_BYTPTR),INTEGER(BEG),LENGTH)
   R_BYTPTR=R_BYTPTR+LENGTH
   R_BYTCNT=R_BYTCNT-LENGTH
%END


%EXTERNALROUTINE WRITESQ(%INTEGER M, %NAME BEGIN, END)
   %RECORD(SCB)%NAME DASQSCB;   !CONTAINS THE CURRENT DASQ RECORD
   %RECORD(RINGHEADER)%NAME R
   %INTEGER LENGTH,N,REMAINDER,BUFSPACE,BEG
   DASQ CHANNEL CHECK(M,SQFILE)
   DASQSCB==DASQVEC(M)_NAME
   R==DASQSCB_RINGHEAD
   %IF DASQSCB_OBUFOP=0 %START
      ERRMSG="Outputting to an SQ channel set for input"
      %SIGNAL 10,27,M
   %FINISH
!SET FOR OUTPUT ONLY
   %IF DASQSCB_IBUFOP # 0 %THEN DASQSCB_IBUFOP=0 %AND DASQSCB_USETI=0
   LENGTH=DASQ LENGTH(M,BEGIN,END)
   BUFSPACE=DASQSCB_BLOCKSIZE-R_BYTCNT
   BEG=ADDR(BEGIN)&RH
   %IF LENGTH > BUFSPACE %START
      %IF BUFSPACE # 0 %START
         BLT(INTEGER(BEG),INTEGER(R_BYTPTR),BUFSPACE)
         BEG=BEG+BUFSPACE
         LENGTH=LENGTH-BUFSPACE
      %FINISH
   !HERE ON A FULL BUFFER
      R_BYTPTR=RH&R_BUFADR+2
      WTDUMP(DASQSCB,DASQSCB_BLOCKSIZE,INTEGER(R_BYTPTR))
      R_BYTCNT=0
      BUFSPACE=DASQSCB_BLOCKSIZE
      REMAINDER=REM(LENGTH,DASQSCB_BLOCKSIZE)
      %IF REMAINDER = 0 %START
      !WRITE OUT WHOLE MULTIPLE OF BLOCKS
         WTDUMP(DASQSCB,LENGTH,INTEGER(BEG))
         %RETURN
      %FINISH
      !ELSE WRITE OUT N AND FILL BUFFER
      N=LENGTH//DASQSCB_BLOCKSIZE
      %IF N # 0 %START
         WTDUMP(DASQSCB,N*DASQSCB_BLOCKSIZE,INTEGER(BEG))
         BEG=BEG+N*DASQSCB_BLOCKSIZE
      %FINISH
      LENGTH=REMAINDER
   %FINISH
   !HERE WHEN LENGTH <=BUFSPACE
   BLT(INTEGER(BEG),INTEGER(R_BYTPTR),LENGTH)
   R_BYTPTR=R_BYTPTR+LENGTH
   R_BYTCNT=R_BYTCNT+LENGTH
%END


%EXTERNALROUTINE CLOSESQ(%INTEGER M)
   CLDASQ(M,SQFILE)
%END

%ENDOFFILE

