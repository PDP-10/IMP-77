!+
! ^THIS IS THE LIBRARY OF DIRECT ACCESS AND SEQUENTIAL ACCESS FILES UTILITIES
!^IT USES A SIMILAR MECHANISM TO THE STREAMS, USING THE SAME STREAM CONTROL
!BLOCKS BUT UTILISING DUMP-MODE READING AND WRITING ROUTINES.
!-


%INCLUDE "IMP:IOLIB.INC"

%CONSTINTEGER LH=8_777777000000, RH=8_777777

%EXTERNALINTEGERSPEC FUNCTION
%EXTERNALRECORD(SCBNAME)%ARRAYSPEC DASQVEC(1:MAXCHANS)

%EXTERNALSTRING(255)%SPEC ERRMSG
%SYSTEMROUTINESPEC RDDUMP(%RECORD(SCB)%NAME S, %INTEGER LEN,%NAME LOC)
%SYSTEMROUTINESPEC WTDUMP(%RECORD(SCB)%NAME S, %INTEGER LEN, %NAME LOC)
%EXTERNALRECORD(FILESPEC)%FNSPEC STRTOFS(%STRING(255) SPEC)

%SYSTEMROUTINESPEC OPNDASQ(%INTEGER N,%RECORD(FILESPEC)%NAME FS,%INTEGER DAORSQ)
%SYSTEMROUTINESPEC DASQ CHANNEL CHECK(%INTEGER N, DAORSQ FILE)
%SYSTEMINTEGERFNSPEC DASQ LENGTH(%INTEGER CHAN, %NAME BEGIN,END)
%SYSTEMROUTINESPEC CLDASQ(%INTEGER N,TYPE)



%EXTERNALROUTINE XOPENDA(%INTEGER N,%RECORD(FILESPEC)%NAME FS)
   OPNDASQ(N,FS,DAFILE)
%END

%EXTERNALROUTINE OPENDA(%INTEGER N,%STRING(255) SPEC)
   %RECORD(FILESPEC) FS
   FS=STRTOFS(SPEC)
   XOPENDA(N,FS)
%END

%ROUTINE DA BLOCK CHECK(%INTEGER BLOCK)
   %UNLESS 1<=BLOCK<=8_777777 %START
      ERRMSG="Illegal block number in DA read/write"
      %SIGNAL 10,26,BLOCK
   %FINISH
%END



%EXTERNALROUTINE READDA(%INTEGER N, %INTEGERNAME SECT, %NAME BEGIN,END)
   %INTEGER LENGTH
   %RECORD(SCB)%NAME DASQSCB;   !CONTAINS THE CURRENT DASQ RECORD
   DASQ CHANNEL CHECK(N,DAFILE)
   LENGTH=DASQ LENGTH(N,BEGIN,END)
   DA BLOCK CHECK(SECT)
   DASQSCB==DASQVEC(N)_NAME
   %IF DASQSCB_NXTCHR # SECT %START; !ARE WE AT THE BLOCK WE WANT
      AC(1)=DASQSCB_USETI!SECT&RH
      *8_256000000001;    !XCT AC1
   %FINISH
   RDDUMP(DASQSCB,LENGTH,BEGIN)
   SECT=SECT+(LENGTH-1)//DASQSCB_BLOCKSIZE
   DASQSCB_NXTCHR=SECT+1
%END



%EXTERNALROUTINE WRITEDA(%INTEGER N, %INTEGERNAME SECT, %NAME BEGIN, END)
   %INTEGER LENGTH
   %RECORD(SCB)%NAME DASQSCB;   !CONTAINS THE CURRENT DASQ RECORD
   DASQ CHANNEL CHECK(N,DAFILE)
   LENGTH=DASQ LENGTH(N,BEGIN,END)
!MAKE SPECIAL CASE OF APPENDING
   DASQSCB==DASQVEC(N)_NAME
   %IF SECT=-1 %START
      AC(1)=DASQSCB_USETI!SECT&RH
      *8_256000000001; !XCT AC1
   %ELSE %IF SECT # DASQSCB_NXTCHR %START
         DA BLOCK CHECK(SECT)
         AC(1)=DASQSCB_USETO!SECT&RH
         *8_256000000001;    !XCT AC1
   %FINISH
   WTDUMP(DASQSCB,LENGTH,BEGIN)
   %IF SECT=-1 %START;! LAST BLOCK IN FILE
      DASQSCB_LKENT_SIZ=DASQSCB_LKENT_SIZ+LENGTH;!NEW SIZE OF FILE
      SECT=(DASQSCB_LKENT_SIZ-1)//DASQSCB_BLOCKSIZE;  !LAST BLOCK WRITTEN TO
   %ELSE
      SECT=SECT+(LENGTH-1)//DASQSCB_BLOCKSIZE
   %FINISH
   DASQSCB_NXTCHR=SECT+1
%END



%EXTERNALROUTINE CLOSEDA(%INTEGER N)
   CLDASQ(N,DAFILE)
%END

%ENDOFFILE

