%INCLUDE "IMP:IOLIB.INC"
%CONTROL 16_4000

%CONSTINTEGER LH=8_777777000000, RH=8_777777
%CONSTINTEGER BIT0=8_400000000000

%CONSTINTEGER OPEN=8_050, LOOKUP=8_076, ENTER=8_077
%EXTERNALINTEGERSPEC CPU;   !TYPE OF CPU
%EXTERNALRECORD(SCBNAME)%ARRAYSPEC INVEC(-1:MAXCHANS)
%EXTERNALRECORD(SCBNAME)%ARRAYSPEC OUTVEC(-1:MAXCHANS)
%EXTERNALRECORD(SCB)%NAMESPEC INSCB
%EXTERNALRECORD(SCB)%NAMESPEC OUTSCB
%EXTERNALRECORD(SCB)%SPEC IUNSCB
%EXTERNALRECORD(SCB)%SPEC OUNSCB


%EXTERNALINTEGERSPEC RDA
%EXTERNALINTEGERSPEC RDB
%EXTERNALINTEGERSPEC RDTMP
%EXTERNALINTEGERSPEC RDTTYA
%EXTERNALINTEGERSPEC RDTTYI
%EXTERNALINTEGERSPEC WTA
%EXTERNALINTEGERSPEC WTB
%EXTERNALINTEGERSPEC WTTMP
%EXTERNALINTEGERSPEC WTTTYA
%EXTERNALINTEGERSPEC WTTTYI

%EXTERNALINTEGERSPEC MODE;  !VALUES -1 OR 0 - 8_17
%EXTERNALINTEGERSPEC FUNCTION;  !VALUES -1 OR 1-7
%EXTERNALINTEGERSPEC ALLOCATE; !VALUES 0 - 
%EXTERNALINTEGERSPEC BLOCKSIZE; !-1 OR 3 - 10000
%EXTERNALINTEGERSPEC BUFFNUMS;  !-1 OR <20
%EXTERNALINTEGERSPEC DENSITY;  !0 - MAX DENSITIES
%EXTERNALINTEGERSPEC ESTIMATE;  !0 -
%EXTERNALINTEGERSPEC EXTEND;  !5 - 8_35
%EXTERNALINTEGERSPEC PARITY; !0 OR 1
%EXTERNALINTEGERSPEC VERSION; !0 -
%EXTERNALINTEGERSPEC BYTE; !0 -
%EXTERNALINTEGERSPEC TRMOP;  !-1 OR 0


%EXTERNALSTRING(255)%SPEC ERRMSG
%EXTERNALINTEGERFNSPEC STRTOSIX(%STRING(6) SPEC)
%EXTERNALSTRING(6)%FNSPEC SIXTOSTR(%INTEGER I)
%SYSTEMROUTINESPEC SDOUTPUT(%INTEGER N,%STRING(1)%NAME STR)
%EXTERNALROUTINESPEC WRITE OCTAL(%INTEGER N,M)
%SYSTEMROUTINESPEC SOUTPUT(%INTEGER N)
%EXTERNALINTEGERFNSPEC PPN
%EXTERNALPREDICATESPEC CALLI2(%INTEGER N,%INTEGERNAME AC)
%EXTERNALROUTINESPEC GET SWITCHES(%STRING(20)%NAME SWITCHES)
%SYSTEMPREDICATESPEC IOUUO(%INTEGER FN,CHAN, %INTEGERNAME ADDR)
%SYSTEMINTEGERFNSPEC GETVEC(%INTEGER SIZE)
%SYSTEMROUTINESPEC FREEVEC(%INTEGER THIS)
%SYSTEMROUTINESPEC RELEASE(%INTEGER CHAN)
%SYSTEMINTEGERFNSPEC IOWD(%INTEGER LEN, %INTEGERNAME LOC)
%SYSTEMINTEGERFNSPEC TMPCOR(%INTEGER TYPE,BLOCK,NAME)
%EXTERNALINTEGERFNSPEC OUTDEV



%ROUTINESPEC MTA SETUP(%RECORD(SCB)%NAME SCB)
%ROUTINESPEC FILL PATH BLOCK(%RECORD(PATHBLOCK)%NAME PATH, %RECORD(FILESPEC)%NAME FS, %INTEGER DEVNAM)


!+
! ^FOR EASE OF MANIPULATING AND PASSING FILE SPECIFICATIONS AS
!PARAMETERS, THERE IS A PRE-DEFINED RECORD FORMAT CALLED 'FILESPEC'.
!.NF
!    %RECORDFORMAT FILESPEC(%STRING(6) DEV,FILE, %STRING(3) EXT,  %C
!      %INTEGER PPN, %STRING(6)%ARRAY SFDS(1:MAX SFDS) %INTEGER PROT, %STRING(20) SWITCHES)
!.F
!^THIS LIBRARY CONTAINS THREE ROUTINES WHICH ARE USEFUL IN USING THIS
!RECORD STRUCTURE.
! ^THE OTHER COMMON OPERATIONS REQUIRED ON THESE RECORDS ARE
!COPYING THEM AND ZEROING THEM. ^THIS IS ACCOMPLISHED BY THE LANGUAGE
!FEATURES  FS2=FS1  AND FS1=0  RESPECITVELY.
! ^FOR THE USE OF FILESPECS IN OPENING INPUT AND OUTPUT STREAMS MORE
!EFFICIENTLY THAN BY USING 'DEFINE INPUT' AND 'DEFINE OUTPUT' SEE 'IOLIB'
!DOCUMENTATION FOR 'XDEFINEINPUT' AND 'XDEFINEOUTPUT'.
! ^ALSO FOR FACILITIES TO READ FILE SPECIFICATIONS DIRECTLY FROM
!THE CONSOLE SEE 'GETLIB' AND FOR READING CUSP-TYPE FILE SPECIFICATIONS
!SEE 'CSPLIB' DOCUMENTATION.
!-
!+
%EXTERNALROUTINE WRITEFS(%RECORD(FILESPEC)%NAME FS)
    %INTEGER N
    PRINTSTRING(FS_DEV)
    PRINTSYMBOL(':') %IF FS_DEV#""
    PRINTSTRING(FS_FILE)
    PRINTSYMBOL('.') %IF FS_EXT#""
    PRINTSTRING(FS_EXT)
    %IF FS_PPN#0 %START
        PRINTSYMBOL('[')
        WRITEOCTAL(FS_PPN>>18,0); PRINTSYMBOL(','); WRITE OCTAL(FS_PPN&8_777777,0)
        %CYCLE N=1,1,MAX SFDS
            %EXIT %IF FS_SFDS(N)=""
            PRINTSYMBOL(','); PRINTSTRING(FS_SFDS(N))
        %REPEAT
        PRINTSYMBOL(']')
    %FINISH
    %IF FS_PROT#0 %START
         PRINTSYMBOL('<')
         PRINTSYMBOL(FS_PROT>>N&7+'0') %FOR N=6,-3,0
         PRINTSYMBOL('>')
    %FINISH
   PRINTSTRING(FS_SWITCHES)
%END


%EXTERNALSTRING(255)%FN FSTOSTR(%RECORD(FILESPEC)%NAME FS)
%STRING(255) STR
%INTEGER N
   N=OUTSTREAM
   SDOUTPUT(-1,STR)
   SOUTPUT(-1)
   WRITEFS(FS)
   CLOSE OUTPUT
   SELECT OUTPUT(N)
   %RESULT=STR
%END





!+
! ^THE FOLLOWING ROUTINE UTILISE THE FREE-SPACE ALLOCATION
! ROUTINE FOR THE STREAM CONTROL BLOCKS.
!.S
!%SYSTEMROUTINE GETSCB(%RECORD(SCBNAME)%NAME R ,%INTEGER LEN)
! ^GETS THE REQUIRED SPACE. ^WHERE '<LEN' = SIZE OF SCB + REQUIRED LENGTH OF LOOKUP/ENTER BLOCK.
!-

%SYSTEMROUTINE GETSCB(%RECORD(SCBNAME)%NAME R, %INTEGER LEN)
%INTEGER N
    N=GETVEC(LEN)
   INTEGER(ADDR(R))=N
%END



%SYSTEMINTEGERFN GETCHANNEL
   %OWNINTEGER CHAN=0
   %INTEGER I
   %CYCLE I=1,1,15
      CHAN=CHAN+1
      CHAN=1 %IF CHAN>15
      AC(1)=CHAN
      *8_047040000004;   !DEVCHR AC1,0
      %RESULT=CHAN %IF AC(1)=0;  !DEVCHR RETURNS ZERO IF CHANNEL NOT IN USE
   %REPEAT
   ERRMSG="All I/O channels in use"
   %SIGNAL 2,5,0;   !NONE LEFT
%END



%SYSTEMPREDICATE FILOP(%RECORD(SCB)%NAME SCB, %INTEGERNAME ERROR)
   %CONSTINTEGER JBFF=8_121
   %CONSTINTEGER TSK=8_646353
   %INTEGER FUNCT, FOPFN, BUFADR,BUF FUNCT,OLD JBFF
   %INTEGERNAME LKENT ADDR
   FOPFN=SCB_FILOPFN&RH
   OLD JBFF=AC(JBFF)
   AC(JBFF)=SCB_RINGHEAD_BUFADR;  !POINT TO START OF RING AREA FOR FILOP TO BUILD BUFFERS
   %IF SCB_DEVNAM>>18#TSK %START;  !DO NOT USE FILOP FOR TASKS - DOES NOT WORK
      AC(1)=7<<18!ADDR(SCB_FILOPFN)
      *8_047040000155;      !FILOP AC1,
      *8_334000000000;      !SKIPA
      *8_476000000001;      !SETOM AC1
      ERROR=AC(1)
      AC(JBFF)=OLD JBFF;   !RESTORE VALUE OF JBFF
      %IF ERROR=-1 %THEN %TRUE %ELSE ->FAIL
   %FINISH
!OR ELSE DO OLD STYLE
   BUFADR=SCB_RINGHEAD_BUFADR;   !GETS DESTROYED ON AN OPEN
   %UNLESS IOUUO(OPEN,SCB_FILOPFN>>18,SCB_STATUS) %START
      AC(JBFF)=OLD JBFF;   !RESTORE VALUE
      ERRMSG="Cannot open device ".SIXTOSTR(SCB_DEVNAM)
      %SIGNAL 10,6,0;    ! OPEN IOUUO
   %FINISH
   SCB_RINGHEAD_BUFADR=BUFADR;  !RESTORE
   %IF 2<=FOPFN<=3 %START;  !RESTRICTED CHOICE
      FUNCT=ENTER;  BUF FUNCT=SCB_OBUFOP+8_6000<<18!SCB_BUFNUM>>18;   !OUTBUF CHAN,N
   %ELSE
      FUNCT=LOOKUP; BUF FUNCT=SCB_IBUFOP+8_6000<<18!(SCB_BUFNUM&RH);   !INBUF CHAN,N
   %FINISH
!DO IT
   %IF SCB_BUFNUM#0 %START;  !ONLY BUILD BUFFERS IF BUFFERS TO BUILD
      AC(1)=BUF FUNCT;  !GET INBUF OR OUTBUF UUO
      *8_256000000001;   !XCT 1
   %FINISH
   AC(JBFF)=OLD JBFF;  !RESTORE OLD VALUE
   %IF SCB_DEVNAM>>18=TSK %THEN LKENT ADDR==SCB_LKENT_NAM %ELSE LKENT ADDR==SCB_LKENT_CNT;   !SHORT FOR TASKS
   %IF IOUUO(FUNCT,SCB_FILOPFN>>18,LKENT ADDR) %START
     %IF FOPFN<=3 %THEN ERROR=-1 %AND %TRUE; !SUCCESS
      !ELSE UPDATE OR APPEND
      %IF IOUUO(ENTER,SCB_FILOPFN>>18,LKENT ADDR) %START
         ERROR=-1; %TRUE
      %FINISH
   %FINISH
FAIL:
   ERROR=RH&SCB_LKENT_EXT;  !ERROR CODE
   %FALSE
%END



%SYSTEMPREDICATE TAPOP(%INTEGER FUNCT,CHAN,NARGS, %INTEGERARRAYNAME ARGS, %INTEGERNAME RESULT)
! FUNCT, CHAN(PHYSICAL) AND NECCESSARY ARGS MUST BE SET UP ON ENTRY
! THE RESULT(FOR READ FUNCTIONS), BEING RETURNED IN 'RESULT'
   %INTEGER N
   %INTEGERARRAY ARGUMENTS(0:14)
   ARGUMENTS(0)=FUNCT; ARGUMENTS(1)=CHAN
   %FOR N=0,1,NARGS %CYCLE
      ARGUMENTS(N+2)=ARGS(N)
   %REPEAT
   AC(1)=(NARGS+2)<<18 ! (INTEGER(ARGUMENTS(0))&RH) ; ![XWD N,ADDR]
   *8_047040000154;  !TAPOP AC,
   *8_402000000002;  !SETZM AC2
   *8_476000000002;  !SETOM AC2
   N=AC(1); !RESULT
   %IF AC(2)=0 %THEN RESULT=N %AND %FALSE;   !FAILURE
   %IF 8_1000<=FUNCT<=8_1777 %THEN RESULT=N;  !RETURN RESULT
   %TRUE
%END



%EXTERNALSTRING(6)%FN JOBFILE(%STRING(3) NAME)
! RETURNS THE FILENAME 'XXXNAM' WHERE XXX = JOB NO.
%EXTERNALINTEGERFNSPEC JOBNUM
%EXTERNALSTRING(12)%FNSPEC INTTOSTR(%INTEGER DECNUM)
%STRING(12) S
   NAME=SUBSTRING(NAME,1,3) %IF LENGTH(NAME)>3
   S="00".INTTOSTR(JOBNUM).NAME
   %RESULT=SUBSTRING(S,LENGTH(S)-5,LENGTH(S))
%END

%SYSTEMROUTINE SCHECK(%INTEGER N,CHNTYP,%RECORD(SCBNAME)%NAME IOSCB)
   %UNLESS 1<= N <= MAX CHANS %START
      ERRMSG="Defining illegal stream/channel number"
      %SIGNAL 10,1,N
   %FINISH
   %IF (CHNTYP=STREAM %AND IOSCB_NAME_DEVTYP #UNDEV) %OR (CHNTYP#STREAM %AND %NOT IOSCB_NAME==UNDSCB) %START
      ERRMSG="Stream/channel already defined"
      %SIGNAL 10,2,N
   %FINISH
%END


%SYSTEMROUTINE SCBDEFINE(%INTEGER N, %RECORD(FILESPEC)%NAME FS, %RECORD(SCBNAME)%NAME IOSCB, %INTEGER CHNTYP)
   %RECORD(SCB)%NAME S
   %RECORD(TTSCB)%NAME T
   %CONSTINTEGER SIXDSK=8_446353000000, SIXTMP=8_645560000000
   %CONSTINTEGER SIXTTY=8_646471000000,  SIXNUL=8_566554000000
   %CONSTINTEGER SIXCTY=8_436471000000, SIXMPX=8_556070 000000
   %INTEGER CHAN,TTYNAM,SIXDEV,DEVSIZE,DEVNAM,DEVTYP,UDX,BLKSIZE,ARG
   %INTEGERARRAY ARGS(0:1)
   %STRING(71) ERRSTR

   GET SWITCHES(FS_SWITCHES)
   SCHECK(N,CHNTYP,IOSCB)
   %IF FS_DEV = "" %START
      %IF FS_FILE = "" %THEN SIXDEV=SIXNUL %ELSE SIXDEV=SIXDSK; !DEFAULTS DSK OR NUL
   %ELSE SIXDEV=STRTOSIX(FS_DEV)
   ARG=SIXDEV
   %IF CALLI2(8_64,ARG) %START; %FINISH;  !GET PHYSICAL DEVICE NAME
   DEVNAM=ARG
   %IF CALLI2(8_127,ARG) %START; %FINISH;  !GET UDX
   UDX=ARG
   ARG=SIXDEV
   %IF CALLI2(8_53,ARG) %START; %FINISH;;  ! DEVTYP UUO
   DEVTYP=ARG&63
   %IF DEVTYP=TTYDEV %AND TRMOP=0 %START; !IF A TTY DEVICE AND TRMOP REQUESTED
      GETSCB(IOSCB,SCBSIZE)
      T==RECORD(ADDR(IOSCB_NAME))
      T_DEVTYP=TTYDEV
      T_CHNTYP=CHNTYP
      T_ARGPTR=3<<18!ADDR(T_FUNCT)
      %IF MODE&8_17=8_10 %THEN T_FUNCT=8_11 %ELSE T_FUNCT=8_10
      T_UDX=UDX
      %RETURN
   %FINISH
   %IF DEVNAM=0 %AND (SIXDEV # SIXTMP %AND SIXDEV # SIXMPX) %START;  !UNKNOWN DEVICE (NOT "TMP" OR "MPX")
      ERRMSG="Unknown device ".FS_DEV; %SIGNAL 10,3,0
   %FINISH
   %IF DEVTYP=TTYDEV %AND CHNTYP#STREAM %START
      ERRMSG="Not a DA or SQ type device - '".FS_DEV."'"
      %SIGNAL 10,20,0
   %FINISH
   GETSCB(IOSCB,SCBSIZE+EXTEND+1)
   S==IOSCB_NAME
   S_DEVTYP=DEVTYP
   S_CHNTYP=CHNTYP
   S_UDX=UDX
   %IF MODE=-1 %START
      %IF CHNTYP=STREAM %START
         %IF FS_EXT="REL" %THEN S_STATUS=8_14 %ELSE S_STATUS=0
      %ELSE S_STATUS=8_17; !DA OR SQ CHANNEL
   %ELSE S_STATUS=MODE
   S_LKENT==RECORD(ADDR(S_PATHBLK_SFDS(MAXSFDS))+1)
   S_LKENT_CNT=EXTEND
   S_LKENT_NAM=STRTOSIX(FS_FILE)
   S_LKENT_EXT=STRTOSIX(FS_EXT)
   S_LKENT_PPN=ADDR(S_PATHBLK)
   S_PATHARG=(3+MAX SFDS)<<18!ADDR(S_PATHBLK)
   FILL PATH BLOCK(S_PATHBLK,FS,SIXDEV)
   S_LKENT_PRV=FS_PROT<<27
!NOW SETTINGS DEPENDENT ON LENGTH OF BLOCK
   %IF EXTEND>=6 %THEN S_LKENT_VER=VERSION
   %IF EXTEND>=8 %THEN S_LKENT_EST=ESTIMATE
   %IF EXTEND>=9 %THEN S_LKENT_ALC=ALLOCATE
   S_BUFHEDS=ADDR(S_RINGHEAD_BUFADR);   !INPUT BUFFERS
   !NOW HANDLE TMPCOR FILES
   %IF DEVNAM=0 %AND SIXDEV=SIXTMP %START;  !DEVICE="TMP"
      S_DEVNAM=SIXDEV
      S_RINGHEAD_BUFADR=GETVEC(TMPCORSIZE+3)
      S_BUFNUM=1
      S_RINGHEAD_BYTPTR=8_440700<<18!(S_RINGHEAD_BUFADR+2)
      S_TMPNAME=FS_FILE
      S_DEVTYP=TMPDEV
      %RETURN
   %FINISH
   !OR ELSE DISK TYPE
   CHAN=GETCHANNEL;  !GET CHANNEL NUMBER
   S_FILOPFN=(8_400000!CHAN)<<18; !SET NO PROTECTION CHECKING FOR [1,2] & JACCT JOBS
   S_DEVNAM=DEVNAM
   S_IBUFOP=(8_056000!CHAN<<5)<<18;    !  IN CHAN,0
   S_OBUFOP=(8_057000!CHAN<<5)<<18;     !  OUT CHAN,0
   S_USETI=(8_074000!(CHAN<<5))<<18;   ! USETI CHAN,0
   S_USETO=(8_075000!(CHAN<<5))<<18;   ! USETO CHAN,0
   S_STATZ=(8_063000!CHAN<<5)<<18!8_740000;   ! STATZ CHAN,740000
   ARGS(0)=0; ARGS(1)=SIXDEV
   AC(1)=ADDR(ARGS(0))
   *8_047040000101;  !DEVSIZE AC1,0
   *8_402000000001;  !SETZM AC1
   DEVSIZE=AC(1)
   DEVSIZE=2<<18!8_105 %IF DEVNAM=0 %AND SIXDEV=SIXMPX
   %IF DEVSIZE=0 %THEN DEVSIZE=2<<18!DSKBUFFERSIZE; !DEFAULT VALUES FOR DISK
   %IF BLOCKSIZE=-1 %THEN BLKSIZE=DEVSIZE&RH %ELSE BLKSIZE=BLOCKSIZE
   S_BLOCKSIZE=BLKSIZE-3; !DATA AREA SIZE
   %IF CHNTYP=STREAM %START
      %IF BUFFNUMS= -1 %THEN BUFFNUMS=DEVSIZE>>18;  !DEFAULT NUMBER OF BUFFERS
      S_BUFNUM=BUFFNUMS;  !FOR INPUT BUFFER
   %ELSE
      %IF CHNTYP=DAFILE %THEN S_BUFNUM=0 %ELSE S_BUFNUM=1
   %FINISH
   %UNLESS S_BUFNUM=0 %START
      S_BUFVEC=(BLKSIZE*S_BUFNUM)<<18
      S_RINGHEAD_BUFADR=GETVEC(S_BUFVEC>>18);
      S_BUFVEC=S_BUFVEC!S_RINGHEAD_BUFADR
   %FINISH
   %RETURN
%END



%EXTERNALROUTINE XDEFINPUT(%INTEGER N,%RECORD(FILESPEC)%NAME FS)
   %RECORD(TTSCB)%NAME T
   %RECORD(SCB)%NAME SCB
   %INTEGER DEVTYP,NWDS,ERROR
   SCBDEFINE(N,FS,INVEC(N),STREAM)
   SCB==INVEC(N)_NAME
   %IF SCB_DEVTYP=TTYDEV %AND TRMOP=0 %START
      T==RECORD(ADDR(INVEC(N)_NAME))
      %IF T_FUNCT=8_10 %THEN T_OPER==RDTTYA %ELSE T_OPER==RDTTYI
      ->RETURN1
   %FINISH
   !TRY TMPCOR
   %IF SCB_DEVTYP=TMPDEV %START
      NWDS=TMPCOR(1,IOWD(TMPCORSIZE,INTEGER(SCB_RINGHEAD_BUFADR+2)),LH&STRTOSIX(SCB_TMPNAME))
      %IF NWDS # 0 %START;   !SUCCESS
         SCB_OPER==RDTMP
         SCB_RINGHEAD_BYTCNT=5*NWDS
         INTEGER(SCB_RINGHEAD_BUFADR+1)=NWDS; !WORD COUNT
         ->RETURN
      %ELSE;    !FAILURE, SO TRY DSK
         FREEVEC(SCB_RINGHEAD_BUFADR)
         FREEVEC(ADDR(SCB))
         INVEC(N)_NAME==IUNSCB;   !BACK TO UNASSIGNED
         FS_DEV="DSK"; FS_FILE=JOBFILE(FS_FILE); FS_EXT="TMP"
         XDEFINPUT(N,FS)
         ->RETURN
      %FINISH
   %FINISH
   %IF SCB_STATUS&15<=1 %THEN SCB_OPER==RDA %ELSE SCB_OPER==RDB
   %IF SCB_DEVTYP=MTADEV %THEN MTA SETUP(SCB) %AND ->RETURN; !HANDLE MAG TAPES
! OTHERWISE DISK, DTA  ETC.
   SCB_FILOPFN=SCB_FILOPFN!1;  !READ FUNCTION
   %UNLESS FILOP(SCB,ERROR) %START
      %IF SCB_PATHBLK_SWITCHES&8_20#0 %START;  !IF LIBRARY PRESENT AND TO BE SEARCHED
         SCB_PATHBLK_FUNCT=-4;  !GET ADDITIONAL PATH
         AC(1)=(3+MAXSFDS)<<18!ADDR(SCB_PATHBLK)
         *8_047040000110;    !PATH AC1,0
         *8_255000000000;    !JFCL
         %IF FILOP(SCB,ERROR) %THEN ->RETURN;    !TRY AGAIN
      %FINISH
      RELEASE(SCB_FILOPFN>>18&15)
      FREEVEC(SCB_BUFVEC&RH)
      FREEVEC(ADDR(SCB))
      INVEC(N)_NAME==IUNSCB;  !RESET TO UNASSIGNED
      ERRMSG="Lookup error for ".FSTOSTR(FS)
      %SIGNAL 10,4,ERROR;    ! LOOKUP IOUUO
   %FINISH
RETURN:
   SCB_RINGHEAD_BYTPTR=(SCB_RINGHEAD_BYTPTR&RH)!BYTE<<24 %UNLESS BYTE<=0
RETURN1:
   %IF N=INSTREAM %THEN INSCB==INVEC(N)_NAME;    !SET CURRENT SCB POINTER
%END




%EXTERNALROUTINE XDEFOUTPUT(%INTEGER N, %RECORD(FILESPEC)%NAME FS)
   %RECORD(TTSCB)%NAME T
   %RECORD(SCB)%NAME SCB
   %INTEGER ERROR,FN
   SCBDEFINE(N,FS,OUTVEC(N),STREAM)
   SCB==OUTVEC(N)_NAME
   %IF SCB_DEVTYP=TTYDEV %AND TRMOP=0 %START
      T==RECORD(ADDR(OUTVEC(N)_NAME))
      T_FUNCT=T_FUNCT-3;  !MAKE WRITE FUNCTION
      %IF T_FUNCT=5 %THEN T_OPER==WTTTYA %ELSE T_OPER==WTTTYI
      ->RETURN1
   %FINISH
   !TRY TMPCOR
   SCB==OUTVEC(N)_NAME
   SCB_BUFHEDS=SCB_BUFHEDS<<18;  !MOVE OUTPUT BUFFERS TO LH OF WORD
   SCB_BUFNUM=SCB_BUFNUM<<18
   %IF SCB_DEVTYP=TMPDEV %START
      SCB_OPER==WTTMP
      SCB_RINGHEAD_BYTCNT=5*TMPCORSIZE
      INTEGER(SCB_RINGHEAD_BUFADR+1)=TMPCORSIZE;  !WORD COUNT
      ->RETURN
   %FINISH
   %IF SCB_STATUS&15<=1 %THEN SCB_OPER==WTA %ELSE SCB_OPER==WTB
   %IF SCB_DEVTYP=MTADEV %THEN MTA SETUP(SCB) %AND ->RETURN; !HANDLE MAG TAPES
! OTHERWISE DISK, DTA ETC.
   %IF FUNCTION#-1 %THEN FN=FUNCTION %ELSE FN=3;!DEFAULT TO 3
   SCB_FILOPFN=SCB_FILOPFN!FN;  !SET FUNCTION CODE
   %UNLESS FILOP(SCB,ERROR) %START
      RELEASE(SCB_FILOPFN>>18&15)
      FREEVEC(SCB_BUFVEC&RH)
      FREEVEC(ADDR(SCB))
      OUTVEC(N)_NAME==OUNSCB;  !RESET TO UNASSIGNED
      ERRMSG="Enter error for ".FSTOSTR(FS)
      %SIGNAL 10,5,ERROR;    ! ENTER IOUUO
   %FINISH
RETURN:
   SCB_RINGHEAD_BYTPTR=(SCB_RINGHEAD_BYTPTR&RH)!BYTE<<24 %UNLESS BYTE<=0
RETURN1:
   %IF N=OUTSTREAM %THEN OUTSCB==OUTVEC(N)_NAME;  !SET CURRENT SCB POINER
%END


%SYSTEMROUTINE FILL PATH BLOCK(%RECORD(PATHBLOCK)%NAME PATH, %RECORD(FILESPEC)%NAME FS, %INTEGER DEVNAM)
   %INTEGER IMPLIED PPN, I
   %RETURN %IF CPU>2;  !DO NOTHING ON DEC-20
   %IF FS_PPN # 0 %START
      PATH_PPN=FS_PPN
      %CYCLE I=1,1,MAX SFDS
         %IF FS_SFDS(I)="" %THEN PATH_SFDS(I)=0 %AND %RETURN
         PATH_SFDS(I)=STRTOSIX(FS_SFDS(I))
      %REPEAT
   %ELSE
      PATH_PPN=0; PATH_SFDS(I)=0 %FOR I=1,1,MAX SFDS
      PATH_FUNCT=-1;  !READ DEFAULT PATH
      AC(1)=(3+MAX SFDS)<<18!ADDR(PATH)
      *8_047040000110;    !PATH AC1,0     SET UP DEFAULT PATH
      *8_255000000000;    !JFCL
      AC(1)=DEVNAM
      *8_047040000055;     !DEVPPN AC1,     GET THE IMPLIED PPN FOR THE DEVICE
      *8_402000000001;     !SETZM AC1       ZERO ON ERROR
      IMPLIED PPN= AC(1)
      %IF IMPLIED PPN#0 %AND IMPLIED PPN # PATH_PPN %START
         PATH_PPN=0; PATH_SFDS(1)=0
         PATH_SWITCHES=PATH_SWITCHES!8_40;  !IGNORE IMPLIED PPN FOR ERSATZ DEVICES
      %FINISH
   %FINISH
%END




%ROUTINE MTA SETUP(%RECORD(SCB)%NAME SCB)
!THIS ROUTINE SETS UP THE MAG TAPE UNIT ACCORDING TO SWITCHES
!GIVEN IN THE SPEC STRING
   %INTEGER FUNCT,N
   %INTEGERARRAY ARGS(0:1)

   %ROUTINE DOTAPOP
      %INTEGER RESULT
      %UNLESS TAPOP(FUNCT,SCB_FILOPFN>>18,1,ARGS,RESULT) %START
         ERRMSG="TAPOP failure"
         %SIGNAL 10,15,FUNCT
      %FINISH
   %END

   SCB_STATUS=SCB_STATUS!PARITY<<9;   !SET PARITY STATUS BITS
   %UNLESS IOUUO(OPEN,SCB_FILOPFN>>18,SCB_STATUS) %START
      ERRMSG="Cannot open device ".SIXTOSTR(SCB_DEVNAM)
      %SIGNAL 10,6,0;    ! OPEN IOUUO
   %FINISH
   %IF DENSITY>=0 %START
      FUNCT=8_2001
      ARGS(0)=DENSITY
      DOTAPOP
   %FINISH
   %IF BLOCKSIZE#-1 %START
      FUNCT=8_1006
      ARGS(0)=BLOCKSIZE
      DOTAPOP
   %FINISH
%END



%ENDOFFILE
