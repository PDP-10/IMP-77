%BEGIN
! DRAFT4S.
%EXTERNALROUTINESPEC PROMPT(%STRING(255) S)

%INTEGERFN INPUT
  %RESULT=0
%END

%INTEGERARRAY COMP,OPP(0:24)
%OWNINTEGERARRAY CONSCOMP(0:24)='W',86,66,46,26,17,37,57,77,88,68,
                 48,28,1,1,1,1,1,1,1,1,1,1,1,1
%OWNINTEGERARRAY CONSOPP(0:24)='B',13,33,53,73,82,62,42,22,11,31,
                 51,71,1,1,1,1,1,1,1,1,1,1,1,1
%OWNINTEGERARRAY CENTSQ(1:8)=33,35,44,46,53,55,64,66
%INTEGERARRAY MIN,MAX(1:12)
%OWNINTEGERARRAY MOVES(1:8)=-11,-22,9,18,11,22,-9,-18
%OWNINTEGERARRAY REPLY(1:8)
%OWNINTEGER SEARCH LIMIT=3
%INTEGER  BEST PIECE TO MOVE,BEST MOVE,BEST TAKE,%C
VALUEP,VALUEB,I,P,M,PIECE,JMAN,JUMP,DIF,MODIF,PIECEWT,MOBWT,%C
CENTWT,ADVWT,PRINTB,MORE,NPCS,OLDPOS,NEWPOS,LASTPOS,COMPOS,NODES,MON
%INTEGER NPOS,CRAMPWT,ADV2WT,PLY NUMBER,AWIN

!PLAYING FNS.
%INTEGERFN CROWNED(%INTEGER PIECE,%INTEGERARRAYNAME COMP)
%INTEGER POS
POS=COMP(PIECE)
%IF COMP(0)='W' %START
  %IF POS=11 %OR POS=31 %OR POS=51 %OR POS=71 %THEN %RESULT=2
  %RESULT=1
%FINISH
!BLACK PIECE.
%IF POS=28 %OR POS=48 %OR POS=68 %OR POS=88 %THEN %RESULT=2
%RESULT =1
%END

%INTEGERFN COND OF(%INTEGER POS,%INTEGERARRAYNAME COMP,OPP)
%INTEGER I
! ON THE BOARD?
%IF POS<11 %OR POS>88 %THEN %RESULT=-1
%CYCLE I=19,10,79
  %IF POS=I %OR POS=I+1 %THEN %RESULT=-1
%REPEAT
%CYCLE I=1,1,12
  %IF POS=COMP(I) %OR POS=OPP(I) %THEN %RESULT=2
%REPEAT
%RESULT=0 ; ! OKAY.
%END

%INTEGERFN PARITY(%INTEGER N)
%RESULT=N&1
%END

%INTEGERFN APPLICABLE MOVE(%INTEGER MOVE,P,%INTEGERARRAYNAME COMP,OPP)
%INTEGER I,T
%IF COMP(P)=0 %THEN %RESULT=-1
%IF COMP(0)='W' %AND MOVE>4 %AND COMP(P+12)=1 %THEN %RESULT=-1
%IF COMP(0)='B' %AND MOVE<5 %AND COMP(P+12)=1 %THEN %RESULT=-1
%IF PARITY(MOVE)=1 %START
  %IF COND OF(COMP(P)+MOVES(MOVE),COMP,OPP)=0 %THEN %RESULT=0
  %RESULT=-1
%FINISH
! TAKE MOVE.
%IF COND OF(COMP(P)+MOVES(MOVE),COMP,OPP)#0 %THEN%RESULT=-1
T=COMP(P)+MOVES(MOVE-1)
%CYCLE I=1,1,12
  %IF T=OPP(I) %THEN %RESULT=I
%REPEAT
%RESULT=-1
%END

%INTEGERFNSPEC CAN TAKE(%INTEGERARRAYNAME COMP,OPP)
%INTEGERFN VALUE OF POSITION(%INTEGERARRAYNAME COMP,OPP)
%INTEGER V1,V2,V3,V4,V5,V6,V8,P,M,J,B1,B2,APEX
V1=0 ; !PIECE COUNT.
V2=0;V3=0;V4=0
%CYCLE P=1,1,12
  I=P+12
  %IF COMP(I)=1 %THEN V1=V1+1
  %IF COMP(I)=2 %THEN V2=V2+2
  %IF OPP(I)=1 %THEN V3=V3+1
  %IF OPP(I)=2 %THEN V4=V4+2
%REPEAT
V1=V1+V2-(V3+V4)
V8=0; ! BACK.
  %IF COMP(0)='W' %THEN B1=28 %AND B2=68 %AND APEX=57 %ELSE B1=31 %ANDC
B2=71 %AND APEX=42
%IF V4=0 %START
  %IF COMP(12)=B1 %THEN V8=V8+3
  %IF COMP(10)=B2 %THEN V8=V8+3
  %IF COMP(7)=APEX %THEN V8=V8+4
%FINISH
%IF V2=0 %START
B1=59-B1;B2=149-B2;APEX=99-APEX
  %IF OPP(10)=B1 %THEN V8=V8-3
  %IF OPP(12)=B2 %THEN V8=V8-3
  %IF OPP(7)=APEX %THEN V8=V8-4
%FINISH
! MOBILITY.
V2=0;V3=0
%CYCLE P=1,1,12
 %CYCLE M=1,1,8
  %IF APPLICABLE MOVE(M,P,COMP,OPP)>=0 %THENC
   V2=V2+PARITY(M+1)+1
  %IF APPLICABLE MOVE(M,P,OPP,COMP)>=0 %THENC
   V3=V3+(PARITY(M+1)+1)
 %REPEAT
%REPEAT
%IF V2=0 %START
  %IF COMP(0)='W' %THEN %RESULT=-100000 + PLY NUMBER
  %RESULT=100000-PLY NUMBER
%FINISH
V2=V2-V3
V3=0; ! CENTER CONTROL
%CYCLE P=1,1,12
 %CYCLE M=1,1,8
  %IF COMP(P)=CENTSQ(M) %THEN V3=V3+COMP(P+12)
  %IF OPP(P)=CENTSQ(M) %THEN V3=V3-OPP(P+12)
 %REPEAT
%REPEAT
V4=0; ! ADVANCEMENT.
%CYCLE P=1,1,12
 %CYCLE M=1,1,8
  %IF APPLICABLE MOVE(M,P,COMP,OPP)>=0 %START
  COMP(P)=COMP(P)+MOVES(M)
   %IF CROWNED(P,COMP)=2 %AND COMP(P+12)=1 %THEN V4=V4+1 %ANDC
   COMP(P)=COMP(P)-MOVES(M) %ANDEXIT
   COMP(P)=COMP(P)-MOVES(M)
  %FINISH
 %REPEAT
 %CYCLE M=1,1,8
  %IF APPLICABLE MOVE(M,P,OPP,COMP)>=0 %START
   OPP(P)=OPP(P)+MOVES(M)
   %IF CROWNED(P,OPP)=2 %AND OPP(P+12)=1 %THEN V4=V4-1 %ANDC
  OPP(P)=OPP(P)-MOVES(M) %ANDEXIT
   OPP(P)=OPP(P)-MOVES(M)
  %FINISH
 %REPEAT
%REPEAT
!V5 - CRAMP.
V5=0
%CYCLE P=1,1,12
 %CYCLE M=1,2,7
  %IF APPLICABLE MOVE(M,P,OPP,COMP)>=0 %START
   OPP(P)=OPP(P)+MOVES(M)
   %CYCLE I=1,1,12
    %CYCLE J=2,2,8
    %IF APPLICABLE MOVE(J,I,COMP,OPP)>=0 %THEN V5=V5+OPP(P+12) %ANDEXIT
    %REPEAT
   %REPEAT
   OPP(P)=OPP(P)-MOVES(M)
  %FINISH
  %IF APPLICABLE MOVE(M,P,COMP,OPP)>=0 %START
   COMP(P)=COMP(P)+MOVES(M)
   %CYCLE I=1,1,12
    %CYCLE J=2,2,8
    %IF APPLICABLE MOVE(J,I,OPP,COMP)>=0 %THEN V5=V5-COMP(P+12)%ANDEXIT
    %REPEAT
   %REPEAT
   COMP(P)=COMP(P)-MOVES(M)
  %FINISH
 %REPEAT
%REPEAT
! V6 - ADV2.
V6=0
%CYCLE P=1,1,12
 %IF COMP(P+12)=1 %START
  %CYCLE M=1,2,7
   %IF APPLICABLE MOVE(M,P,COMP,OPP) >=0 %START
   COMP(P)=COMP(P)+MOVES(M)
   %CYCLE J=1,2,7
    %IF APPLICABLE MOVE(J,P,COMP,OPP)>=0 %START
     COMP(P)=COMP(P)+MOVES(J)
     %IF CROWNED(P,COMP)=2 %THEN V6=V6+1 %ANDC
     COMP(P)=COMP(P)-MOVES(J) %ANDEXIT
     COMP(P)=COMP(P)-MOVES(J)
    %FINISH
   %REPEAT
   COMP(P)=COMP(P)-MOVES(M)
  %FINISH
 %REPEAT
 %FINISH
%REPEAT
%CYCLE P=1,1,12
 %IF OPP(P+12)=1 %START
  %CYCLE M=1,2,7
   %IF APPLICABLE MOVE(M,P,OPP,COMP)>=0 %START
    OPP(P)=OPP(P)+MOVES(M)
    %CYCLE J=1,2,7
     %IF APPLICABLE MOVE(J,P,OPP,COMP)>=0 %START
      OPP(P)=OPP(P)+MOVES(J)
     %IF CROWNED(P,OPP)=2 %THEN V6=V6-1 %ANDC
      OPP(P)=OPP(P)-MOVES(J) %AND %EXIT
      OPP(P)=OPP(P)-MOVES(J)
     %FINISH
    %REPEAT
   OPP(P)=OPP(P)-MOVES(M)
  %FINISH
 %REPEAT
 %FINISH
%REPEAT
V1=PIECEWT*V1+MOBWT*V2+CENTWT*V3+ADVWT*V4+CRAMPWT*V5+ADV2WT*V6
V1=V1+V8 -PLY NUMBER
%IF COMP(0)='B' %THEN V1 =-V1
%RESULT=V1
%END

%ROUTINE EXPLAIN POS
PRINTSTRING("Blurb in preparation")
NEWLINE
%END

%ROUTINE SAY PLEASE
PRINTSTRING ("Please re-type your move ")
NEWLINE
%END

%ROUTINE PRINT BOARD
%INTEGER I,J,POS,COL,ROW
%INTEGERARRAY A(1:64)
%INTEGERMAP BOARD(%INTEGER I,J)
%RESULT==A(8*(I-1)+J)
%END
! WIPE BOARD.
%CYCLE I=1,1,64
  A(I)=' '
%REPEAT
%CYCLE I=1,2,7
 %CYCLE J=1,2,7
  BOARD(I,J)='%'
  BOARD(I+1,J+1)='%'
 %REPEAT
%REPEAT
%CYCLE I=1,1,12
 %IF COMP(I)#0 %START
  POS=COMP(I)
  ROW=POS//10
  COL=POS-10*ROW
  %IF COMP(I+12)=1 %THEN BOARD(ROW,COL)='C'%ELSE BOARD(ROW,COL)='K'
 %FINISH
 %IF OPP(I)#0 %START
  POS=OPP(I)
  ROW=POS//10
  COL=POS-10*ROW
  %IF OPP(I+12)=1 %THEN BOARD(ROW,COL)='o'%ELSE BOARD(ROW,COL)='='
 %FINISH
%REPEAT
NEWLINE;PRINTSTRING("   A B C D E F G H")
%CYCLE I=8,-1,1
 NEWLINE
 WRITE(I,1)
 %CYCLE J=1,1,8
  SPACE
  PRINT SYMBOL(BOARD(J,I))
 %REPEAT
 WRITE(I,1)
%REPEAT
NEWLINE;PRINTSTRING ("   A B C D E F G H");NEWLINE
%END

%ROUTINE TROUT(%INTEGER OLDPOS,NEWPOS,MODE)
%INTEGER X,Y,S1,S2,T1,T2
X=OLDPOS//10
Y=OLDPOS-10*X
S1=X+'A'-1
S2=Y+'0'
X=NEWPOS//10
Y=NEWPOS-10*X
T1=X+'A'-1
T2=Y+'0'
%IF MODE =1 %START
 PRINTSTRING ("DRAFT4's move is ")
 PRINT SYMBOL(S1);PRINT SYMBOL(S2);PRINT SYMBOL('-')
 PRINT SYMBOL(T1);PRINT SYMBOL(T2)
%FINISHELSESTART
 SPACE;PRINT SYMBOL(',');SPACE;PRINT SYMBOL(S1);PRINT SYMBOL(S2)
 PRINT SYMBOL('-');PRINT SYMBOL(T1);PRINT SYMBOL(T2)
%FINISH
%END

%ROUTINE TAKE(%INTEGER T,P,MV,%INTEGERARRAYNAME COMP,OPP,%INTEGERC
MODE,TAKES)
%INTEGER M,APP
%IF MODE='P' %THEN TROUT(COMP(P),COMP(P)+MOVES(MV) ,TAKES+1)
COMP(P)=COMP(P)+MOVES(MV);OPP(T)=0; OPP(T+12)=0
%IF COMP(P+12)=1 %START
  COMP(P+12)=CROWNED(P,COMP)
  %IF COMP(P+12)=2 %THEN %RETURN
%FINISH
%CYCLE M=2,2,8
 APP=APPLICABLE MOVE(M,P,COMP ,OPP)
 %IF APP>0 %THEN TAKE(APP,P,M,COMP,OPP,MODE,TAKES+1) %ANDRETURN
%REPEAT
%END

%ROUTINE MAKE MOVE(%INTEGER M,P,T,%INTEGERARRAYNAME COMP,OPP,%C
%INTEGER MODE)
%IF T=0 %START
 %IF MODE='P'%THEN TROUT(COMP(P),COMP(P)+MOVES(M),1)
 COMP(P)=COMP(P)+MOVES(M)
 %UNLESS COMP(P+12)=2 %THEN COMP(P+12)=CROWNED(P,COMP)
 %RETURN
%FINISH
! TAKE MOVE.
TAKE(T,P,M,COMP,OPP,MODE,0)
%END

%INTEGERFN CAN TAKE(%INTEGERARRAYNAME OPP,COMP)
%INTEGER P,M
%CYCLE P=1,1,12
 %CYCLE M=2,2,8
  %IF APPLICABLE MOVE(M,P,OPP,COMP)>0 %THEN %RESULT='T'
 %REPEAT
%REPEAT
%RESULT='F'
%END

%INTEGERFN TRY POSSIBLE MOVES(%INTEGER PLY,DEPTH ,%INTEGERARRAYNAMEC
 COMP,OPP)
%INTEGERARRAY TCOMP,TOPP(0:24)
%INTEGER APT,P,M,VALUE,TAKEFLAG,I,FOR
  %INTEGERFN PURSUIT VALUE(%INTEGER M)
    %IF PLY=1 %THEN %RESULT=1
    %RESULT=PARITY(M)
   %END
FOR=COMP(0); ! CONSIDER MOVES FOR COMP (='W') OR OPP (='B').
NODES =NODES+1
!     Principle of hot pursuit.
%IF (DEPTH>=SEARCH LIMIT %AND CAN TAKE(COMP,OPP)='F') %ORC
PLY>12 %THEN PLY NUMBER=PLY-1 %AND %RESULT=VALUE OF POSITION(COMP,OPP)
MIN(PLY)=100000;MAX(PLY)=-100000;TAKE FLAG=0
%IF CAN TAKE(COMP,OPP)='T' %THEN TAKEFLAG=1
%CYCLE P=1,1,12
 %CYCLE M=1,1,8
 %IF PARITY(M)=1 %AND TAKEFLAG=1 %THEN APT=-1 %ELSEC
 APT=APPLICABLE MOVE(M,P,COMP,OPP)
 %UNLESS APT<0 %START
  ! COPY COMP->TCOMP,OPP->TOPP.
  %CYCLE I=0,1,24
    TCOMP(I)=COMP(I)
    TOPP(I)=OPP(I)
  %REPEAT
  MAKE MOVE(M,P,APT,TCOMP,TOPP,'Q')
  VALUE=TRY POSSIBLE MOVES(PLY+1,DEPTH+ PURSUIT VALUE(M),TOPP,TCOMP)
  %IF VALUE >MAX(PLY) %AND FOR='W' %START
   MAX(PLY)=VALUE
   %IF PLY=1 %START
    BEST MOVE=M
    BEST PIECE TO MOVE=P
    BEST TAKE=APT
   %FINISH
  %FINISH
  %IF VALUE<MIN(PLY) %AND FOR='B' %START
   MIN(PLY)=VALUE
  %FINISH
 %FINISH
! alpha-beta pruning.
%IF FOR='B' %AND MIN(PLY)<=MAX(PLY-1) %THEN %RESULT=MIN(PLY)
%IF PLY#1 %AND MAX(PLY)>=MIN(PLY-1) %AND FOR='W' %THENC
%RESULT=MAX(PLY)
%REPEAT
%REPEAT
! mini-maxing.
%IF FOR='W' %THEN %RESULT=MAX(PLY)
%RESULT=MIN(PLY)
%END

%INTEGERFN POSITION OF(%INTEGER S1,S2)
%RESULT=10*(S1-'A'+1) +(S2-'0')
%END

%ROUTINE READ BOARD
  %ROUTINE SKIP SPACES AND NLS
    SKIP SYMBOL%WHILE NEXT SYMBOL=' ' %OR NEXT SYMBOL=NL
  %END
%INTEGER P,S1,S2,S3,POS
%CYCLE P=1,1,24
  COMP(P)=0
  OPP(P)=0
%REPEAT
PRINTSTRING("Where are your pieces?");NEWLINE
%CYCLE P=1,1,12
  PROMPT(":")
  SKIP SPACES AND NLS
  READ SYMBOL(S1);%IF S1='*' %THENEXIT
  READ SYMBOL(S2)
  READ SYMBOL(S3)
  POS=POSITION OF(S1,S2);OPP(P)=POS
  %IF S3=' ' %THEN OPP(P+12)=1 %ELSE OPP(P+12)=2
  SKIP SPACES AND NLS
%REPEAT
SKIP SYMBOL %WHILE INPUT#0
PRINTSTRING("Where are my pieces?");NEWLINE
%CYCLE P=1,1,12
  PROMPT(":")
  SKIP SPACES AND NLS
  READ SYMBOL(S1);%IF S1='*' %THENEXIT
  READ SYMBOL(S2)
  READ SYMBOL(S3)
  POS=POSITION OF(S1,S2);COMP(P)=POS
  %IF S3=' ' %THEN COMP(P+12)=1 %ELSE COMP(P+12)=2
%REPEAT
%END
!
! ** MAIN PROGRAM **
!
PIECEWT=1000;MOBWT=6
CENTWT=4;ADVWT=550;CRAMPWT=6;ADV2WT=50
MON='Q'
NEWLINE
PRINTSTRING ("The Draughts Program , DRAFT4.")
NEWLINE
! Setting up the pieces.
%CYCLE P=0,1,24
  COMP(P)=CONSCOMP(P)
  OPP(P)=CONSOPP(P)
%REPEAT
PRINTSTRING ("Have you played me before?");NEWLINE
PROMPT(":")
READ SYMBOL(REPLY(1))
READ SYMBOL(REPLY(2))
READ SYMBOL(REPLY(3))
%UNLESS REPLY(3)=NL %THEN  SKIP SYMBOL
%IF REPLY(1)='N' %THEN EXPLAIN POS
PRINTSTRING ("Do you want to start?");NEWLINE
PROMPT(":")
READ SYMBOL(REPLY(1))
SKIP SYMBOL %WHILE INPUT#0
%IF REPLY(1)='R' %START
  READ BOARD
  SKIP SYMBOL %WHILE INPUT#0
  PRINTSTRING("Is it your move?");NEWLINE
  PROMPT(":")
  READ SYMBOL(REPLY(1))
  SKIP SYMBOL %UNTIL INPUT=0
  %IF REPLY(1)='Y' %THEN -> READ MOVE %ELSE -> COMP MOVE
%FINISH
%IF REPLY(1)='N'%START
PRINTSTRING("Think of a number please");NEWLINE
PROMPT(":")
READ(I);SKIP SYMBOL
I=I&3
%IF I=0 %THEN  PRINTSTRING("DRAFT4's opening move is D6-C5") %AND %C
 COMP(3)=35
%IF I=1%THEN PRINTSTRING("DRAFT4's opening move is D6-E5")%ANDC
 COMP(3)=55
%IF I=2%OR I=3%THEN PRINTSTRING("DRAFT4's opening move is F6-E5") %ANDC
 COMP(2)=55
 NEWLINE
%FINISH
AWIN=0
PRINTB=' '
READ MOVE: 
%IF PRINTB='P'%THEN PRINT BOARD
PROMPT(":")
%CYCLE I=1,1,8
READ SYMBOL(REPLY(I))
  %IF REPLY(I)=NL %THENEXIT
%REPEAT
REPLY(I)=' ' %AND I=I+1 %UNTIL I=9
%IF REPLY(1)='M' %THEN MON='M' %AND -> READ MOVE
%IF REPLY(1)='Q' %THEN MON='Q' %AND -> READ MOVE
%IF REPLY(1)='P'%THEN PRINT BOARD %AND -> READ MOVE
TRANS: %IF REPLY(1)='I'%THEN -> STOP
%IF REPLY(6)=','%THEN MORE='M'%ELSE MORE=' '
%IF REPLY(6)='P'%THEN PRINTB='P'%ELSE PRINTB=' '
OLDPOS=POSITION OF(REPLY(1),REPLY(2))
NEWPOS=POSITION OF(REPLY(4),REPLY(5))
%IF COND OF(OLDPOS,COMP,OPP)=-1 %START
 PRINTSTRING ("The square ");PRINT SYMBOL(REPLY(1))
 PRINT SYMBOL(REPLY(2))
 PRINTSTRING(" does not exist!"); NEWLINE
 SAY PLEASE
 -> READ MOVE
%FINISH
M=COND OF(NEWPOS,COMP,OPP)
%IF M=-1 %START
PRINTSTRING ("You cannot move to square ")
 PRINT SYMBOL(REPLY(4));PRINT SYMBOL(REPLY(5))
 PRINTSTRING(". It does not exist!");NEWLINE
 SAY PLEASE
 -> READ MOVE
%FINISH
%IF M=2 %START
 PRINTSTRING ("You cannot move to square ")
 PRINT SYMBOL(REPLY(4));PRINT SYMBOL(REPLY(5))
 NEWLINE
 PRINTSTRING ("It is already occupied!");NEWLINE
 SAY PLEASE
 -> READ MOVE
%FINISH
%CYCLE P=1,1,12
  %IF OLDPOS=OPP(P)%THENEXIT
%REPEAT
%UNLESS OLDPOS=OPP(P)%START
 PRINTSTRING ("You do not have a piece on square ")
 PRINT SYMBOL(REPLY(1));PRINT SYMBOL(REPLY(2))
 NEWLINE
 SAY PLEASE
 -> READ MOVE
%FINISH
PIECE=P
DIF=NEWPOS-OLDPOS
MODIF=IMOD(DIF)
%IF MODIF<12 %AND CAN TAKE(OPP,COMP)='T'%START
PRINTSTRING ("You MUST take the piece that I am offering you
")
SAY PLEASE
-> READ MOVE
%FINISH
%IF MODIF<12 %AND MORE='M'%START
PRINTSTRING("That's not part of a multiple jump move");NEWLINE
SAY PLEASE
-> READ MOVE
%FINISH
%IF (DIF=-11 %OR DIF=-22 %OR DIF=9 %OR DIF=18)%ANDC
OPP(PIECE+12)=1 %START
PRINTSTRING("You cannot move that piece backwards!");NEWLINE
SAY PLEASE 
-> READ MOVE
%FINISH
%UNLESS MODIF=11 %OR MODIF=9 %OR MODIF=22 %OR MODIF=18 %START
PRINTSTRING ("That move does not exist in my rule book!");NEWLINE
SAY PLEASE
-> READ MOVE
%FINISH
%IF MODIF>11 %START
JUMP=DIF//2
COMPOS=OLDPOS+JUMP
%CYCLE I=1,1,12
%IF COMPOS=COMP(I)%THENEXIT
%REPEAT
%UNLESS COMPOS=COMP(I)%START
PRINTSTRING("You cannot do that.You are not jumping one of my pieces
")
SAY PLEASE
-> READ MOVE
%FINISHELSE JMAN=I
%FINISHELSE JMAN=0
OPP(PIECE)=OPP(PIECE)+DIF
%UNLESS OPP(PIECE+12)=2 %THEN OPP(PIECE+12)=CROWNED(PIECE,OPP)
COMP(JMAN)=0 %AND COMP(JMAN+12)=0 %UNLESS JMAN=0
%IF MORE='M'%START
LASTPOS=NEWPOS
READ AGAIN:
PROMPT("&")
%CYCLE I=1,1,8
READ SYMBOL(REPLY(I))
%IF REPLY(I)=NL %THENEXIT
%REPEAT
%IF REPLY(1)='.'%THEN -> COMP MOVE
REPLY(I)=' '%AND I=I+1 %UNTIL I=9
OLDPOS=POSITION OF(REPLY(1),REPLY(2))
NEWPOS=POSITION OF(REPLY(4),REPLY(5))
DIF=NEWPOS-OLDPOS
DIF=IMOD(DIF)
%IF DIF>11 %AND OLDPOS=LASTPOS %THEN -> TRANS
PRINTSTRING("That's not part of a multiple jump");NEWLINE
PRINTSTRING("Please re-type that part");NEWLINE
-> READ AGAIN
%FINISH
COMP MOVE: ! COMPUTER MAKES MOVE.
NPCS=0
NPOS=0
%CYCLE P=1,1,12
%IF COMP(P)#0 %THEN NPCS=NPCS+1
%IF OPP(P)#0 %THEN NPOS=NPOS+1
%REPEAT
%IF NPCS=0 %START
PRINTSTRING ("I have no pieces left so you have won") ;NEWLINE
-> STOP
%FINISH
I=0
%CYCLE P=1,1,12
  %CYCLE M=1,1,8
   %IF APPLICABLE MOVE(M,P,COMP,OPP)>=0 %THEN I=1 %ANDEXIT
  %REPEAT
%REPEAT
%IF I=0 %START
 PRINTSTRING("I cannot move any of my pieces so you win")
 NEWLINE
 -> STOP
%FINISH
! If in end game then increase search.
%IF NPCS+NPOS<=4 %THEN SEARCH LIMIT=4
! FIND BEST MOVE.
NODES=0
VALUEB=TRY POSSIBLE MOVES(1,1,COMP,OPP)
%IF VALUEB<=-99990 %START
  PRINTSTRING("I resign");NEWLINE
  -> STOP
%FINISH
VALUEP=VALUE OF POSITION(COMP,OPP)
%IF MON='M' %START
  PRINTSTRING("Nodes considered = ");WRITE(NODES,3);NEWLINE
  PRINTSTRING("Value of board= ");WRITE(VALUEB,3);NEWLINE
%FINISH
MAKE MOVE(BEST MOVE,BEST PIECE TO MOVE,BEST TAKE,COMP,OPP,'P')
NEWLINE
NPOS=0
%CYCLE P=1,1,12
 %IF OPP(P)#0 %THEN NPOS=1 %ANDEXIT
%REPEAT
%IF NPOS=0 %START
 PRINTSTRING ("You have no pieces left so I win");NEWLINE
 -> STOP
%FINISH
I=0
%CYCLE P=1,1,12
 %CYCLE M=1,1,8
  %IF APPLICABLE MOVE(M,P,OPP,COMP)>=0 %THEN I=1 %ANDEXIT
 %REPEAT
%REPEAT
%IF I=0 %START
 PRINTSTRING("You cannot move any of your pieces so I win")
 NEWLINE
 -> STOP
%FINISH
%IF VALUEB>=99990  %AND AWIN=0 %START
  PRINTSTRING("He-He! I am going to win!");NEWLINE
  AWIN=1
%FINISH
-> READ MOVE
STOP: NEWLINE
PRINTSTRING ("The final board position is -");NEWLINE
PRINT BOARD
%ENDOFPROGRAM
